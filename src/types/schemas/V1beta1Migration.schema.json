{
  "$ref": "#/definitions/V1beta1Migration",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "IoK8sApimachineryPkgApisMetaV1ObjectMeta": {
      "additionalProperties": false,
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "number"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "number"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/IoK8sApimachineryPkgApisMetaV1OwnerReference"
          },
          "type": "array"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IoK8sApimachineryPkgApisMetaV1OwnerReference": {
      "additionalProperties": false,
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object"
    },
    "V1beta1Migration": {
      "additionalProperties": false,
      "properties": {
        "apiVersion": {
          "description": "apiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/IoK8sApimachineryPkgApisMetaV1ObjectMeta",
          "description": "metadata"
        },
        "spec": {
          "$ref": "#/definitions/V1beta1MigrationSpec",
          "description": "spec MigrationSpec defines the desired state of Migration"
        },
        "status": {
          "$ref": "#/definitions/V1beta1MigrationStatus",
          "description": "status MigrationStatus defines the observed state of Migration"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object"
    },
    "V1beta1MigrationSpec": {
      "additionalProperties": false,
      "description": "MigrationSpec defines the desired state of Migration",
      "properties": {
        "cancel": {
          "description": "cancel Source reference. Either the ID or Name must be specified.",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationSpecCancel"
          },
          "type": "array"
        },
        "cutover": {
          "description": "cutover Date and time to finalize a warm migration. If present, this will override the value set on the Plan.",
          "format": "{date-time}",
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/V1beta1MigrationSpecPlan",
          "description": "plan Reference to the associated Plan."
        }
      },
      "type": "object"
    },
    "V1beta1MigrationSpecCancel": {
      "additionalProperties": false,
      "description": "Source reference. Either the ID or Name must be specified.",
      "properties": {
        "id": {
          "description": "id The object ID. vsphere: The managed object ID.",
          "type": "string"
        },
        "name": {
          "description": "name An object Name. vsphere: A qualified name.",
          "type": "string"
        },
        "type": {
          "description": "type Type used to qualify the name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "V1beta1MigrationSpecPlan": {
      "additionalProperties": false,
      "description": "Reference to the associated Plan.",
      "properties": {
        "apiVersion": {
          "description": "apiVersion API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "fieldPath If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
          "type": "string"
        },
        "kind": {
          "description": "kind Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "namespace Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "resourceVersion Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "uid UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "V1beta1MigrationStatus": {
      "additionalProperties": false,
      "description": "MigrationStatus defines the observed state of Migration",
      "properties": {
        "completed": {
          "description": "completed Completed timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "conditions": {
          "description": "conditions Condition",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusConditions"
          },
          "type": "array"
        },
        "observedGeneration": {
          "description": "observedGeneration The most recent generation observed by the controller.",
          "format": "{int64}",
          "type": "number"
        },
        "started": {
          "description": "started Started timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "vms": {
          "description": "vms VM Status",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusVms"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "V1beta1MigrationStatusConditions": {
      "additionalProperties": false,
      "description": "Condition",
      "properties": {
        "category": {
          "description": "category The condition category.",
          "type": "string"
        },
        "durable": {
          "description": "durable The condition is durable - never un-staged.",
          "type": "boolean"
        },
        "items": {
          "description": "items",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastTransitionTime": {
          "description": "lastTransitionTime When the last status transition occurred.",
          "format": "{date-time}",
          "type": "string"
        },
        "message": {
          "description": "message The human readable description of the condition.",
          "type": "string"
        },
        "reason": {
          "description": "reason The reason for the condition or transition.",
          "type": "string"
        },
        "status": {
          "description": "status The condition status [true,false].",
          "type": "string"
        },
        "type": {
          "description": "type The condition type.",
          "type": "string"
        }
      },
      "required": [
        "category",
        "lastTransitionTime",
        "status",
        "type"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVms": {
      "additionalProperties": false,
      "description": "VM Status",
      "properties": {
        "completed": {
          "description": "completed Completed timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "conditions": {
          "description": "conditions Condition",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusVmsConditions"
          },
          "type": "array"
        },
        "error": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsError",
          "description": "error Errors"
        },
        "hooks": {
          "description": "hooks Plan hook.",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusVmsHooks"
          },
          "type": "array"
        },
        "id": {
          "description": "id The object ID. vsphere: The managed object ID.",
          "type": "string"
        },
        "name": {
          "description": "name An object Name. vsphere: A qualified name.",
          "type": "string"
        },
        "phase": {
          "description": "phase Phase",
          "type": "string"
        },
        "pipeline": {
          "description": "pipeline Pipeline step.",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusVmsPipeline"
          },
          "type": "array"
        },
        "restorePowerState": {
          "description": "restorePowerState Source VM power state before migration.",
          "type": "string"
        },
        "started": {
          "description": "started Started timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "type": {
          "description": "type Type used to qualify the name.",
          "type": "string"
        },
        "warm": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsWarm",
          "description": "warm Warm migration status"
        }
      },
      "required": [
        "phase"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsConditions": {
      "additionalProperties": false,
      "description": "Condition",
      "properties": {
        "category": {
          "description": "category The condition category.",
          "type": "string"
        },
        "durable": {
          "description": "durable The condition is durable - never un-staged.",
          "type": "boolean"
        },
        "items": {
          "description": "items",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastTransitionTime": {
          "description": "lastTransitionTime When the last status transition occurred.",
          "format": "{date-time}",
          "type": "string"
        },
        "message": {
          "description": "message The human readable description of the condition.",
          "type": "string"
        },
        "reason": {
          "description": "reason The reason for the condition or transition.",
          "type": "string"
        },
        "status": {
          "description": "status The condition status [true,false].",
          "type": "string"
        },
        "type": {
          "description": "type The condition type.",
          "type": "string"
        }
      },
      "required": [
        "category",
        "lastTransitionTime",
        "status",
        "type"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsError": {
      "additionalProperties": false,
      "description": "Errors",
      "properties": {
        "phase": {
          "description": "phase",
          "type": "string"
        },
        "reasons": {
          "description": "reasons",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "phase",
        "reasons"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsHooks": {
      "additionalProperties": false,
      "description": "Plan hook.",
      "properties": {
        "hook": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsHooksHook",
          "description": "hook Hook reference."
        },
        "step": {
          "description": "step Pipeline step.",
          "type": "string"
        }
      },
      "required": [
        "step"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsHooksHook": {
      "additionalProperties": false,
      "description": "Hook reference.",
      "properties": {
        "apiVersion": {
          "description": "apiVersion API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "fieldPath If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.",
          "type": "string"
        },
        "kind": {
          "description": "kind Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "namespace Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "resourceVersion Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "uid UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "V1beta1MigrationStatusVmsPipeline": {
      "additionalProperties": false,
      "description": "Pipeline step.",
      "properties": {
        "annotations": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "description": "annotations Annotations."
        },
        "completed": {
          "description": "completed Completed timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "description": {
          "description": "description Name",
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsPipelineError",
          "description": "error Error."
        },
        "name": {
          "description": "name Name.",
          "type": "string"
        },
        "phase": {
          "description": "phase Phase",
          "type": "string"
        },
        "progress": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsPipelineProgress",
          "description": "progress Progress."
        },
        "reason": {
          "description": "reason Reason",
          "type": "string"
        },
        "started": {
          "description": "started Started timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "tasks": {
          "description": "tasks Migration task.",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusVmsPipelineTasks"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsPipelineError": {
      "additionalProperties": false,
      "description": "Error.",
      "properties": {
        "phase": {
          "description": "phase",
          "type": "string"
        },
        "reasons": {
          "description": "reasons",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "phase",
        "reasons"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsPipelineProgress": {
      "additionalProperties": false,
      "description": "Progress.",
      "properties": {
        "completed": {
          "description": "completed Completed units.",
          "format": "{int64}",
          "type": "number"
        },
        "total": {
          "description": "total Total units.",
          "format": "{int64}",
          "type": "number"
        }
      },
      "required": [
        "completed",
        "total"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsPipelineTasks": {
      "additionalProperties": false,
      "description": "Migration task.",
      "properties": {
        "annotations": {
          "anyOf": [
            {},
            {
              "type": "null"
            }
          ],
          "description": "annotations Annotations."
        },
        "completed": {
          "description": "completed Completed timestamp.",
          "format": "{date-time}",
          "type": "string"
        },
        "description": {
          "description": "description Name",
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsPipelineTasksError",
          "description": "error Error."
        },
        "name": {
          "description": "name Name.",
          "type": "string"
        },
        "phase": {
          "description": "phase Phase",
          "type": "string"
        },
        "progress": {
          "$ref": "#/definitions/V1beta1MigrationStatusVmsPipelineTasksProgress",
          "description": "progress Progress."
        },
        "reason": {
          "description": "reason Reason",
          "type": "string"
        },
        "started": {
          "description": "started Started timestamp.",
          "format": "{date-time}",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsPipelineTasksError": {
      "additionalProperties": false,
      "description": "Error.",
      "properties": {
        "phase": {
          "description": "phase",
          "type": "string"
        },
        "reasons": {
          "description": "reasons",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "phase",
        "reasons"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsPipelineTasksProgress": {
      "additionalProperties": false,
      "description": "Progress.",
      "properties": {
        "completed": {
          "description": "completed Completed units.",
          "format": "{int64}",
          "type": "number"
        },
        "total": {
          "description": "total Total units.",
          "format": "{int64}",
          "type": "number"
        }
      },
      "required": [
        "completed",
        "total"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsWarm": {
      "additionalProperties": false,
      "description": "Warm migration status",
      "properties": {
        "consecutiveFailures": {
          "description": "consecutiveFailures",
          "format": "{int64}",
          "type": "number"
        },
        "failures": {
          "description": "failures",
          "format": "{int64}",
          "type": "number"
        },
        "nextPrecopyAt": {
          "description": "nextPrecopyAt",
          "format": "{date-time}",
          "type": "string"
        },
        "precopies": {
          "description": "precopies Precopy durations",
          "items": {
            "$ref": "#/definitions/V1beta1MigrationStatusVmsWarmPrecopies"
          },
          "type": "array"
        },
        "successes": {
          "description": "successes",
          "format": "{int64}",
          "type": "number"
        }
      },
      "required": [
        "consecutiveFailures",
        "failures",
        "successes"
      ],
      "type": "object"
    },
    "V1beta1MigrationStatusVmsWarmPrecopies": {
      "additionalProperties": false,
      "description": "Precopy durations",
      "properties": {
        "end": {
          "description": "end",
          "format": "{date-time}",
          "type": "string"
        },
        "snapshot": {
          "description": "snapshot",
          "type": "string"
        },
        "start": {
          "description": "start",
          "format": "{date-time}",
          "type": "string"
        }
      },
      "type": "object"
    }
  }
}