{
  "$ref": "#/definitions/ProviderSecret",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "OVirtProviderSecret": {
      "additionalProperties": false,
      "description": "Provider secret containing credentials and other confidential information for OVirt.",
      "properties": {
        "cacert": {
          "description": "OVirt server cacerts, can be a linked list of multiple certifications.\n\nNOTE: ATM cacert is not optional because       insecureSkipVerify is not implemented in our ovirt image-io client\n\nProvider type: OVirt Conditions: Required if insecureSkipVerify is false Validation Regexp:    ssl public key: .*",
          "type": "string"
        },
        "insecureSkipVerify": {
          "description": "Indicate that the client can ignore certificate verification.\n\nProvider type: OVirt Conditions: Optional",
          "type": "boolean"
        },
        "password": {
          "description": "OVirt user password\n\nProvider type: OVirt Conditions: Required Validation Regexp: .*",
          "type": "string"
        },
        "providerType": {
          "const": "ovirt",
          "type": "string"
        },
        "user": {
          "description": "OVirt user name\n\nProvider type: OVirt Conditions: Required Validation Regexp: .*",
          "type": "string"
        }
      },
      "required": [
        "providerType",
        "user",
        "password"
      ],
      "type": "object"
    },
    "OpenShiftProviderSecret": {
      "additionalProperties": false,
      "description": "Provider secret containing credentials and other confidential information for OpenShift.",
      "properties": {
        "providerType": {
          "const": "openshift",
          "type": "string"
        },
        "token": {
          "description": "k8s token for a user that can admin kubevirt on the k8s cluster\n\nProvider type: OpenShift Conditions: Required Validation Regexp:    JW token:      /^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]*)/gm    kubeadm token: /^[a-z0-9]{6}.[a-z0-9]{16}$/",
          "type": "string"
        }
      },
      "required": [
        "providerType",
        "token"
      ],
      "type": "object"
    },
    "OpenstackProviderSecret": {
      "additionalProperties": false,
      "description": "Provider secret containing credentials and other confidential information for Openstack.",
      "properties": {
        "cacert": {
          "description": "openstack server cacerts, can be a linked list of multiple certifications.\n\nProvider type: openstack Conditions: Required if insecureSkipVerify is false Validation Regexp:    ssl public key: .*",
          "type": "string"
        },
        "domainName": {
          "description": "openstack domain name\n\nProvider type: openstack Conditions: Required Validation Regexp: .*",
          "type": "string"
        },
        "insecureSkipVerify": {
          "description": "Indicate that the client can ignore certificate verification.\n\nProvider type: openstack Conditions: Optional",
          "type": "boolean"
        },
        "password": {
          "description": "openstack user password\n\nProvider type: openstack Conditions: Required Validation Regexp: .*",
          "type": "string"
        },
        "projectName": {
          "description": "openstack domain name\n\nProvider type: openstack Conditions: Required Validation Regexp: .*",
          "type": "string"
        },
        "providerType": {
          "const": "openstack",
          "type": "string"
        },
        "regionName": {
          "description": "openstack region name\n\nProvider type: openstack Conditions: Required Validation Regexp: .*",
          "type": "string"
        },
        "username": {
          "description": "openstack user name\n\nProvider type: openstack Conditions: Required Validation Regexp: .*",
          "type": "string"
        }
      },
      "required": [
        "providerType",
        "username",
        "password"
      ],
      "type": "object"
    },
    "ProviderSecret": {
      "anyOf": [
        {
          "$ref": "#/definitions/OpenShiftProviderSecret"
        },
        {
          "$ref": "#/definitions/VSphereProviderSecret"
        },
        {
          "$ref": "#/definitions/OVirtProviderSecret"
        },
        {
          "$ref": "#/definitions/OpenstackProviderSecret"
        }
      ],
      "description": "Provider secret containing credentials and other confidential information"
    },
    "VSphereProviderSecret": {
      "additionalProperties": false,
      "description": "Provider secret containing credentials and other confidential information for VSphere",
      "properties": {
        "insecureSkipVerify": {
          "description": "Indicate that the client can ignore certificate verification.\n\nProvider type: OVirt Conditions: Optional",
          "type": "boolean"
        },
        "password": {
          "description": "VSphere user password\n\nProvider type: VSphere Conditions: Required Validation Regexp: .*",
          "type": "string"
        },
        "providerType": {
          "const": "vsphere",
          "type": "string"
        },
        "thumbprint": {
          "description": "VSphere server thumbprint\n\nNOTE: thumbprint is not optional because CDI does not currently       implement `insecureSkipVerify`. The `vddkImage` is using CDI       and we can't remove this dependency at this point.\n\nProvider type: VSphere Conditions: Required Validation Regexp:    secure hash algorithm (SHA1) signature: .*",
          "type": "string"
        },
        "user": {
          "description": "VSphere user name\n\nProvider type: VSphere Conditions: Required Validation Regexp: .*",
          "type": "string"
        }
      },
      "required": [
        "providerType",
        "user",
        "password",
        "thumbprint"
      ],
      "type": "object"
    }
  }
}