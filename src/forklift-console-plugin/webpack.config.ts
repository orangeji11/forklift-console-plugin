/* eslint-disable @cspell/spellchecker */
/* eslint-env node */

import * as path from 'path';

import CopyPlugin from 'copy-webpack-plugin';
import { DateTime } from 'luxon';
import svgToMiniDataURI from 'mini-svg-data-uri';
import TerserPlugin from 'terser-webpack-plugin';
import { TsconfigPathsPlugin } from 'tsconfig-paths-webpack-plugin';
import {
  type Configuration as WebpackConfiguration,
  BannerPlugin,
  EnvironmentPlugin,
} from 'webpack';
import { type Configuration as WebpackDevServerConfiguration } from 'webpack-dev-server';

import { createBannerComment, getBuildMetadata } from '@kubev2v/build/src/metadata';
import { DynamicConsoleRemotePlugin, WriteJsonFilePlugin } from '@kubev2v/webpack';

import packageJson from './package.json';
import extensions from './plugin-extensions';
import pluginMetadata from './plugin-metadata';

const pathTo = (relativePath: string) => path.resolve(__dirname, relativePath);

const production = process.env.NODE_ENV === 'production';

/**
 * The build metadata (package.json of the thing running webpack & git info)
 */
const buildInfo = getBuildMetadata(packageJson);

/**
 * The chunk banner (including the '@buildInfo' tag so terser can be configured to keep it)
 */
const banner = createBannerComment(packageJson, buildInfo, '@buildInfo for `[file]`');

export const ENVIRONMENT_DEFAULTS = {
  /**
   * Used for testing when no api servers are available.  If set to `mock`, network api
   * calls will use mock data.
   */
  DATA_SOURCE: 'remote' as 'mock' | 'remote',

  /**
   * UI branding name.
   *
   * Note: downstream builds are set to: 'RedHat'
   */
  BRAND_TYPE: 'Konveyor' as 'RedHat' | 'Konveyor',

  /**
   * Namespaces to add to the mock data is `DATA_SOURCE = 'mock'`.
   */
  NAMESPACE: 'konveyor-forklift',

  /**
   * Namespaces used by UI forms and modals if no namespace is given by the user.
   *
   * Note: downstream build are set to: 'openshift-mtv'
   */
  DEFAULT_NAMESPACE: 'konveyor-forklift',

  /**
   * NODE_ENV: used to bake debugging information on development builds.
   */
  NODE_ENV: (production ? 'production' : 'development') as 'production' | 'development',

  /**
   * Name of the console plugin.  It should be set to the plugin name used in the
   * installation scripts.  Defaults to the name in `package.json`: 'forklift-console-plugin'.
   */
  PLUGIN_NAME: pluginMetadata.name,

  /**
   * Version of the plugin.  Defaults to the version in `package.json`.
   */
  VERSION: pluginMetadata.version,

  /**
   * Test/dev only. Starting point for all time-related test data.
   */
  TEST_TIMELINE_START: DateTime.now().minus({ days: 1 }).toISO(),
  /**
   * Test/dev only. The "now" moment in time for all time-related test data.
   */
  TEST_TIMELINE_NOW: DateTime.now().toISO(),
};

const config: WebpackConfiguration & {
  devServer: WebpackDevServerConfiguration;
} = {
  mode: production ? 'production' : 'development',
  context: pathTo('src'),
  entry: {}, // entry generated by `DynamicConsoleRemotePlugin`
  output: {
    path: pathTo('dist'),
    publicPath: `/api/plugins/${pluginMetadata.name}/`,
    chunkFilename: production ? 'chunks/[name].[chunkhash:8].min.js' : 'chunks/[name].js',
    assetModuleFilename: production ? 'assets/[name].[contenthash:8][ext]' : 'assets/[name][ext]',
    filename: production ? '[name]-bundle-[hash:8].min.js' : '[name]-bundle.js',
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx'],
    plugins: [new TsconfigPathsPlugin({ baseUrl: '.' })],
  },
  module: {
    rules: [
      {
        test: /\.(tsx?)$/,
        exclude: /node_modules/,
        use: [
          {
            loader: 'ts-loader',
            options: {
              projectReferences: true,
            },
          },
        ],
      },
      {
        test: /\.s?(css)$/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.svg$/,
        type: 'asset/inline',
        generator: {
          dataUrl: (content) => {
            content = content.toString();
            return svgToMiniDataURI(content);
          },
        },
      },
      {
        test: /\.(png|jpg|jpeg|gif|woff2?|ttf|eot|otf)(\?.*$|$)/,
        type: 'asset/resource',
        generator: {
          filename: 'assets/[name].[ext]',
        },
      },
      {
        test: /\.m?js/,
        resolve: {
          fullySpecified: false,
        },
      },
    ],
  },
  devServer: {
    static: ['./dist'],
    host: 'localhost',
    hot: false,
    port: 9001,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
      'Access-Control-Allow-Headers': 'X-Requested-With, Content-Type, Authorization',
      'Service-Worker-Allowed': '/', // needed to support MockServiceWorker
    },
    devMiddleware: {
      writeToDisk: true,
    },
    client: {
      progress: true,
    },
  },
  plugins: [
    new BannerPlugin({ banner, raw: true }),
    new WriteJsonFilePlugin({
      contents: buildInfo,
      jsonFilename: 'build-metadata.json',
    }),
    new DynamicConsoleRemotePlugin({
      pluginMetadata,
      extensions,
    }),
    new CopyPlugin({
      patterns: [{ from: '../locales', to: '../dist/locales' }],
    }),
    new EnvironmentPlugin(ENVIRONMENT_DEFAULTS),
  ],
  devtool: 'source-map',
  optimization: {
    chunkIds: production ? 'deterministic' : 'named',
    minimize: production ? true : false,
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          // Keep class names and function names in sources to aid debug and diagnostics of prod builds
          keep_classnames: true,
          keep_fnames: true,

          // keep the build info banner comment in the JS chunks
          format: {
            comments: /@buildInfo/i,
          },
        },
      }),
    ],
  },
};

export default config;
